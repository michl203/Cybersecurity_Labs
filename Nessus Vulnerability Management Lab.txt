Nessus Vulnerability Management Lab
                             By Michael Ambeguia


Purpose:
To provide myself with a beginner friendly, structured, and hands-on learning experience applying the vulnerability management process using Nessus Essentials. I would also like to practice effectively identifying, analyzing, and remediating security vulnerabilities within Linux-based environments.


Skills Applied:
1. Applying the vulnerability management process
2. Using the Nessus Essentials vulnerability scanner
3. Configuring/ Maintaining vulnerability Scanners
4. Interpreting scan results
5. Remediating vulnerabilities
6. Reporting Findings


Sections:
1.  Lab Introduction
2.  Nessus Installation
3.  Configuration and Initialization
4.  Basic Scanning
5.  Advanced Scanning 
6.  Interpreting Scan Results
7.  Remediation Strategies
8.  Reporting and Documentation


Section #1 Lab Introduction:


1.1. Lab Topology:




  



All devices for this lab are on the same subnet, hence the circle containing the topology of the lab. The devices are on the 192.168.1.0/24 subnet.




1.2 Vulnerability Management Lifecycle:
  



The vulnerability management lifecycle has 5 steps.


Step 1. Identification: Identification is when you use vulnerability scanners to scan devices and applications for vulnerabilities. At this step your goal is to use the tools at your disposal to find possible vulnerabilities. Not all vulnerabilities are valid. Some might be false positives which means that the scanner thinks it found one when it is not present. Some might be false negatives which means that the scanner thinks a vulnerability is not present when it is. That is why step #3 is so important.


Step 2. Analysis: Analysis is the step after the scanning occurs. During this step your goal is to analyze the results of the scan. At this step you will analyze the vulnerabilities found and prioritize which ones need to be remediated. This is done based off of the CVSS scores and the ease of the remediation.


Step 3. Response and Remediation: During this step you will use a remediation strategy to resolve the vulnerabilities. The remediation strategy I will be using is to first verify that the vulnerability is present, patch the vulnerability, then rescan the device to verify that the vulnerability has been remediated. If the vulnerability is still present you will have to try patching it again.


Step #4: Validate Remediation: This step is when the rescanning to validate the vulnerability is gone. In this lab I included it as part of step #3 since it is closely tied to step 3.


Step #5: Reporting: The last step is to report your findings. This step also serves as a point of reflection. You can go over the steps you took during the scan and think about what went wrong and what you might do next time to improve the process.


Section #2 Nessus Installation:


In this lab I will be using Nessus Essentials, the free version of Nessus Professional, to perform the vulnerability scanning.


2.1 Sign up for a Nessus For Education account on the Nessus website: https://www.tenable.com/tenable-for-education/nessus-essentials?edu=true so that you can get a license for Nessus Essentials.


  

2.2 Download Nessus


  













 I used dpkg -i to install nessus. Dpkg -i is different from apt install since apt install is used to install packages from a remote repository over the internet while dpkg -i is used to download packages you download manually off of the internet onto your Debian based Linux device.
  

Once it is installed,, you need to start the nessusd service so that Nessus is up and running on your system.
  









 Nessus can then be accessed through your browser on the device you installed it on. Simply type in your device’s ip address along with the port Nessus uses, 8834.
  



Section #3 Configuring and Initializing Nessus
3.1 Choose register for Nessus Essentials:


  

3.2. Skip logging in if you already have a license key.


  

After skipping, enter in the license key, then create your login info for the Nessus Essentials scanner.
  
  







  



  









Section #4 Basic Scanning:
A. The first type of scan that I will perform is basic, non credentialed scans. Non-credentialed scans are non-invasive and simulate what an external attacker will see if they were trying to find vulnerabilities on the network devices. Unlike credentialed scans, these scans do not get a deep view of the system configuration of the devices and merely identify open ports and services. Since these scans only look at the devices from the outside they might not find all vulnerabilities, and if vulnerabilities are found they might be false-positives.


B. Scanning Ubuntu Desktop VM #1 ( IPv4 Address 192.168.1.36):


For this first scan I will demonstrate the steps in detail, subsequent scans will omit the details since I will use the same parameters for them except for the name and the ip address.




1. Create the scan name and specify the target ip address:
  

2. Keep all the defaults for the other parameters:
  

  

  



3.  I won’t include credentials this time around:
       
4. I also don’t have to do anything for the plugins:
  



5. Perform the scan:


To perform the scan you have to go to click on the scan you created, then click launch:


  



Now the scan is running!
  

6. Look at the results:


I won’t analyze the results in detail now, but here are the results of the uncredentialed basic scan:


  

              






C. Scanning Ubuntu Server VM:
  



  





Section #5 Advanced Scanning:


A. The second type of scan I will perform is the credentialed scans. Like I mentioned before these scans can perform a deeper scan of the devices and identify system configuration vulnerabilities unlike non credentialed scans. It is good practice to perform both non-credentialed scans and credentialed scans since they can complement each other. The credentialed scans can find vulnerabilities that the non credentialed scans missed, assuring that all vulnerabilities are identified on the devices. Credentialed scans are also great to utilize in an environment where  network security protections like firewalls and intrusion prevention systems are prevalent. Firewalls and IPSs will interfere with regular external, non credentialed scans. With credentialed scans the vulnerability scanner can subvert the network defenses and perform the scan unimpeded.




B. Scanning Ubuntu Desktop VM #1 ( IPv4 Address 192.168.1.36):


1. I will now create the credentialed scan for the Ubuntu Desktop VM #1. I will use the same parameters as the non credentialed scan, except this time I will provide the credentials for SSH login so the scanner goes deep into the VM.
  

  

   


2. Look at results of the credentialed scan:
  

3. The last thing that you should do after the scan is delete the credentials for Nessus:
  



C. Scanning Ubuntu Server VM #2 ( IPv4 Address ):


  





  

  

D.  Scanning RHEL server VM ( IPv4 Address 192.168.1.28):


  

  



  

Section #6 Interpreting Scan Results:


For the purposes of this lab I will only be interpreting the results based on the credentialed scans because these scans provide much more information than the non credentialed scans. I will only interpret the results for the Ubuntu Server VM, and focus on critical vulnerabilities only to save time as well. Also the scans used the CVSS 3.0 scoring system even though it has been replaced with CVSS 4.0.


A.  Interpret the Scan Report for Ubuntu Server VM :


1. Create a PDF report of the scan:
  

I created a PDF report for the Ubuntu Server VM scan. The report contains details for all the vulnerabilities found such as the cvss score, how the vulnerability works, and some remediation steps to fix it. Nessus is helpful since the remediation information is highly detailed and straightforward to implement.




2. Interpret the results for Ubuntu Server VM:


The Ubuntu Server VM has 6 critical vulnerabilities and 9 high. 


1.  The first critical vulnerability Nessus found is actually multiple CVEs related to Python.
CVSS 3.0 Score
	Attack Vector
	Attack Complexity
	Privileges Required
	User Interaction
	Scope
	Confidentiality
	Integrity
	Integrity
	Score: 9.8
	Network
	Low
	None
	None
	Unchanged
	High
	High
	High
	



         2. The second critical vulnerability is related to Kerberos which is a network authentication protocol used to control access to network resources. It should be noted that I do not use Kerberos in my lab environment
CVSS 3.0 Score
	Attack Vector
	Attack Complexity
	Privileges Required
	User Interaction
	Scope
	Confidentiality
	Integrity
	Availability
	Score: 9.1
	Network
	Low
	None
	None
	Unchanged
	High
	None
	High
	





3. The third critical vulnerability is related to the SciPy package. 
CVSS 3.0 Score
	Attack Vector
	Attack Complexity
	Privileges Required
	User Interaction
	Scope
	Confidentiality
	Integrity
	Availability
	Score: 9.8
	Network
	Low
	None
	None
	Unchanged
	High
	High
	High
	



4. Critical vulnerability four is related to the wget package.
CVSS 3.0 Score
	Attack Vector
	Attack Complexity
	Privileges Required
	User Interaction
	Scope
	Confidentiality
	Integrity
	Availability
	Score: 9.1
	Network
	Low
	None
	None
	Unchanged
	High
	High
	NOne
	



5. Critical vulnerability 5 is related to the BusyBox package.
CVSS 3.0 Score
	Attack Vector
	Attack Complexity
	Privileges Required
	User Interaction
	Scope
	Confidentiality
	Integrity
	Availability
	Score: 9.8
	Network
	Low
	None
	None
	Unchanged
	High
	High
	High
	



6. Critical Vulnerability 6 is related to the OpenSSL package.
CVSS 3.0 Score
	Attack Vector
	Attack Complexity
	Privileges Required
	User Interaction
	Scope
	Confidentiality
	Integrity
	Availability
	Score: 9.1
	Network
	Low
	None
	None
	Unchanged
	High
	None
	High
	







7. Choose the most urgent vulnerabilities to remediate for the next section:
I will make my decisions regarding the order for remediation based on a few factors: 1. The CVSS base score, 2. Is the full CIA triad compromised by the vulnerability?,  and lastly 3. Is the remediation easy?




Vulnerability
	CVSS Base Score
	Full CIA compromised?
	Remediation easy?
	Python Packages
	9.8
	Yes
	Yes ( update packages)
	Kerberos
	9.1
	No
	Yes (update packages)
	SciPy
	9.8
	Yes
	No ( Requires Ubuntu Pro)
	Wget
	9.1
	No
	Yes (update packages)
	BusyBox
	9.8
	Yes
	Yes ( update packages)
	OpenSSL
	9.1
	No
	Yes (update packages)
	

So, I will do the Python vulnerability first, then BusyBox. I will skip SciPy since I do not have Ubuntu Pro, and I do not use it. Next I will do the Kerberos, Wget, and OpenSSL patches.


Section #6 Remediation Strategies:
 Note: I will only demonstrate the remediation strategies I implemented for the Ubuntu Server VM to cut the size of this lab writeup down. Also, I will only demonstrate the steps I took to remediate the critical vulnerabilities since they are the most urgent ones that must be remediated.


Remediation Strategy:


  







6a. Remediate Ubuntu Server Vulnerabilities:




1. Verify the vulnerabilities are present and patch if present:


To verify the vulnerabilities are present I will create a bash script that will automate the process. The bash script will take the package name, the version needed, and if the package version needed to remediate the vulnerability is not present, the script will update the package.


Package
	Version needed for remediation
	Python
	  

	SciPy
	  

	BusyBox
	  

	Kerberos
	  

	Wget
	  

	OpenSSL
	  

	





Script:


While you can simply use apt upgrade to patch the packages, using my script is a better option for me. Using apt upgrade will update all packages that can be updated, but you don’t have control over the version installed when doing so. I created the bash script since I want to have control over the package version being  installed. I also want the ability to check that either the currently installed package version is the one with the patch or not.


How does the script work?
1. The script prompts users for the number of packages they want to search for, and stores that value in the variable num_packages.
2. Next, using a for loop structure, the script iterates through the prompts based on the num_packages value. For each package the user is prompted to enter the string value for the package name and the version required for remediation.
3. The package_version value is used to create a new variable called installed_version that stores the output of the dpkg -s command used on package_name. The output is also filtered so that only the string value of the version installed is displayed.


  



Fix The Vulnerabilities using my script:


1.BusyBox


Something interesting occurred! The currently installed version is the version needed to fix the vulnerability discovered by Nessus. This could possibly be a sign that the vulnerability was a false positive. A false positive means that the vulnerability scanner, in this case Nessus, thought that it found a vulnerability when in fact none was present. This also demonstrates why my script is useful for the remediation process. If I simply used apt upgrade and assumed that all the packages were fixed I would have skipped an important part of the remediation process, verifying the vulnerability is present! I would have updated a package for no reason!


  



2. Python Vulnerabilities
False Positive!
  

3. Kerberos
 False Positive!
  



4.  Wget
False Positive!
  



5. OpenSSl
False Positive!
  













Why are all my critical vulnerabilities false positives?


I used a basic network scan and did not configure it whatsoever, I just used the default options. Apparently in order to avoid false positives you need to configure custom settings on the scan template!
  





2. Scan the VM again to verify the vulnerabilities are gone:
Since the critical vulnerabilities are possibly false positives, I will rescan the Ubuntu Server but I will tweak the scan settings so that false positives can be avoided.


  



The scan will also be credentialed again as well.
  



I will now run the new scan to show that the critical vulnerabilities were simply false positives:
The new scan has no critical vulnerabilities anymore! Only one high, a few medium and one low.
  



Well, I learned something very important from this. You should never just assume that the vulnerabilities are actually present and you should also try to configure scans to reduce false positives so that your time can be spent on real vulnerabilities. 


Section #8 Reporting and Documentation:


The last step in the vulnerability management process is to perform reporting and documentation. During reporting and documentation you should explain what steps you took during the round of vulnerability management, what you discovered, and what you should do next time to improve the efficiency and effectiveness of the vulnerability management process. For this lab I will just discuss some things that I would need to do during the next scan to improve the process.


Improvements for my next scanning process:


1.  I should use a custom basic scan template and configure the scan to limit the number of false positives it finds.


* During this round many false positives were detected on the Ubuntu Server VM and RHEL VM.
* A lot of time was spent tracking down false positives that could have been spent on remediating actual vulnerabilities.


2. Export data from Nessus to Excel for quicker analysis/ drilldown.
* I could have used Excel to analyze the vulnerability data more efficiently.


3. I can use CVSS 4.0 scoring for the vulnerabilities next time. I used CVSS 3.0 scoring for this lab but CVSS 3.0 is deprecated.